//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.FleetServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Vehicle", Namespace="http://schemas.datacontract.org/2004/07/Server.Models")]
    [System.SerializableAttribute()]
    public partial class Vehicle : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BrandField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float InsuranceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LeasingFromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float LeasingRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LeasingToField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LicensePlateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModelField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Brand {
            get {
                return this.BrandField;
            }
            set {
                if ((object.ReferenceEquals(this.BrandField, value) != true)) {
                    this.BrandField = value;
                    this.RaisePropertyChanged("Brand");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Insurance {
            get {
                return this.InsuranceField;
            }
            set {
                if ((this.InsuranceField.Equals(value) != true)) {
                    this.InsuranceField = value;
                    this.RaisePropertyChanged("Insurance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LeasingFrom {
            get {
                return this.LeasingFromField;
            }
            set {
                if ((this.LeasingFromField.Equals(value) != true)) {
                    this.LeasingFromField = value;
                    this.RaisePropertyChanged("LeasingFrom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float LeasingRate {
            get {
                return this.LeasingRateField;
            }
            set {
                if ((this.LeasingRateField.Equals(value) != true)) {
                    this.LeasingRateField = value;
                    this.RaisePropertyChanged("LeasingRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LeasingTo {
            get {
                return this.LeasingToField;
            }
            set {
                if ((this.LeasingToField.Equals(value) != true)) {
                    this.LeasingToField = value;
                    this.RaisePropertyChanged("LeasingTo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LicensePlate {
            get {
                return this.LicensePlateField;
            }
            set {
                if ((object.ReferenceEquals(this.LicensePlateField, value) != true)) {
                    this.LicensePlateField = value;
                    this.RaisePropertyChanged("LicensePlate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Model {
            get {
                return this.ModelField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelField, value) != true)) {
                    this.ModelField = value;
                    this.RaisePropertyChanged("Model");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Employee", Namespace="http://schemas.datacontract.org/2004/07/Server.Models")]
    [System.SerializableAttribute()]
    public partial class Employee : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.FleetServiceReference.BusinessUnit BusinessUnitIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EmployeeNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SalutationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.FleetServiceReference.BusinessUnit BusinessUnitId {
            get {
                return this.BusinessUnitIdField;
            }
            set {
                if ((object.ReferenceEquals(this.BusinessUnitIdField, value) != true)) {
                    this.BusinessUnitIdField = value;
                    this.RaisePropertyChanged("BusinessUnitId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EmployeeNumber {
            get {
                return this.EmployeeNumberField;
            }
            set {
                if ((this.EmployeeNumberField.Equals(value) != true)) {
                    this.EmployeeNumberField = value;
                    this.RaisePropertyChanged("EmployeeNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Salutation {
            get {
                return this.SalutationField;
            }
            set {
                if ((object.ReferenceEquals(this.SalutationField, value) != true)) {
                    this.SalutationField = value;
                    this.RaisePropertyChanged("Salutation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BusinessUnit", Namespace="http://schemas.datacontract.org/2004/07/Server.Models")]
    [System.SerializableAttribute()]
    public partial class BusinessUnit : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/Server.Models")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsAdminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Firstname {
            get {
                return this.FirstnameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstnameField, value) != true)) {
                    this.FirstnameField = value;
                    this.RaisePropertyChanged("Firstname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAdmin {
            get {
                return this.IsAdminField;
            }
            set {
                if ((this.IsAdminField.Equals(value) != true)) {
                    this.IsAdminField = value;
                    this.RaisePropertyChanged("IsAdmin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Lastname {
            get {
                return this.LastnameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastnameField, value) != true)) {
                    this.LastnameField = value;
                    this.RaisePropertyChanged("Lastname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VehicleToEmployeeRelation", Namespace="http://schemas.datacontract.org/2004/07/Server.Models")]
    [System.SerializableAttribute()]
    public partial class VehicleToEmployeeRelation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.FleetServiceReference.Employee EmployeeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.FleetServiceReference.Vehicle VehicleIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.FleetServiceReference.Employee EmployeeId {
            get {
                return this.EmployeeIdField;
            }
            set {
                if ((object.ReferenceEquals(this.EmployeeIdField, value) != true)) {
                    this.EmployeeIdField = value;
                    this.RaisePropertyChanged("EmployeeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.FleetServiceReference.Vehicle VehicleId {
            get {
                return this.VehicleIdField;
            }
            set {
                if ((object.ReferenceEquals(this.VehicleIdField, value) != true)) {
                    this.VehicleIdField = value;
                    this.RaisePropertyChanged("VehicleId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FleetServiceReference.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddVehicle", ReplyAction="http://tempuri.org/IService/AddVehicleResponse")]
        bool AddVehicle(Client.FleetServiceReference.Vehicle vehicle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddVehicle", ReplyAction="http://tempuri.org/IService/AddVehicleResponse")]
        System.Threading.Tasks.Task<bool> AddVehicleAsync(Client.FleetServiceReference.Vehicle vehicle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveVehicle", ReplyAction="http://tempuri.org/IService/RemoveVehicleResponse")]
        bool RemoveVehicle(Client.FleetServiceReference.Vehicle veh);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveVehicle", ReplyAction="http://tempuri.org/IService/RemoveVehicleResponse")]
        System.Threading.Tasks.Task<bool> RemoveVehicleAsync(Client.FleetServiceReference.Vehicle veh);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllVehicles", ReplyAction="http://tempuri.org/IService/GetAllVehiclesResponse")]
        System.Collections.Generic.List<Client.FleetServiceReference.Vehicle> GetAllVehicles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllVehicles", ReplyAction="http://tempuri.org/IService/GetAllVehiclesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Client.FleetServiceReference.Vehicle>> GetAllVehiclesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddEmployee", ReplyAction="http://tempuri.org/IService/AddEmployeeResponse")]
        bool AddEmployee(Client.FleetServiceReference.Employee emp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddEmployee", ReplyAction="http://tempuri.org/IService/AddEmployeeResponse")]
        System.Threading.Tasks.Task<bool> AddEmployeeAsync(Client.FleetServiceReference.Employee emp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveEmployee", ReplyAction="http://tempuri.org/IService/RemoveEmployeeResponse")]
        bool RemoveEmployee(Client.FleetServiceReference.Employee emp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveEmployee", ReplyAction="http://tempuri.org/IService/RemoveEmployeeResponse")]
        System.Threading.Tasks.Task<bool> RemoveEmployeeAsync(Client.FleetServiceReference.Employee emp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllEmployees", ReplyAction="http://tempuri.org/IService/GetAllEmployeesResponse")]
        System.Collections.Generic.List<Client.FleetServiceReference.Employee> GetAllEmployees();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllEmployees", ReplyAction="http://tempuri.org/IService/GetAllEmployeesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Client.FleetServiceReference.Employee>> GetAllEmployeesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddBusinessUnit", ReplyAction="http://tempuri.org/IService/AddBusinessUnitResponse")]
        bool AddBusinessUnit(Client.FleetServiceReference.BusinessUnit businessUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddBusinessUnit", ReplyAction="http://tempuri.org/IService/AddBusinessUnitResponse")]
        System.Threading.Tasks.Task<bool> AddBusinessUnitAsync(Client.FleetServiceReference.BusinessUnit businessUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveBusinessUnit", ReplyAction="http://tempuri.org/IService/RemoveBusinessUnitResponse")]
        bool RemoveBusinessUnit(Client.FleetServiceReference.BusinessUnit businessUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveBusinessUnit", ReplyAction="http://tempuri.org/IService/RemoveBusinessUnitResponse")]
        System.Threading.Tasks.Task<bool> RemoveBusinessUnitAsync(Client.FleetServiceReference.BusinessUnit businessUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllBusinessUnits", ReplyAction="http://tempuri.org/IService/GetAllBusinessUnitsResponse")]
        System.Collections.Generic.List<Client.FleetServiceReference.BusinessUnit> GetAllBusinessUnits();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllBusinessUnits", ReplyAction="http://tempuri.org/IService/GetAllBusinessUnitsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Client.FleetServiceReference.BusinessUnit>> GetAllBusinessUnitsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Login", ReplyAction="http://tempuri.org/IService/LoginResponse")]
        Client.FleetServiceReference.User Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Login", ReplyAction="http://tempuri.org/IService/LoginResponse")]
        System.Threading.Tasks.Task<Client.FleetServiceReference.User> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ChangePassword", ReplyAction="http://tempuri.org/IService/ChangePasswordResponse")]
        string ChangePassword(Client.FleetServiceReference.User user, string oldPw, string newPw, string newPwWdh);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ChangePassword", ReplyAction="http://tempuri.org/IService/ChangePasswordResponse")]
        System.Threading.Tasks.Task<string> ChangePasswordAsync(Client.FleetServiceReference.User user, string oldPw, string newPw, string newPwWdh);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllUsers", ReplyAction="http://tempuri.org/IService/GetAllUsersResponse")]
        System.Collections.Generic.List<Client.FleetServiceReference.User> GetAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllUsers", ReplyAction="http://tempuri.org/IService/GetAllUsersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Client.FleetServiceReference.User>> GetAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteUser", ReplyAction="http://tempuri.org/IService/DeleteUserResponse")]
        void DeleteUser(Client.FleetServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteUser", ReplyAction="http://tempuri.org/IService/DeleteUserResponse")]
        System.Threading.Tasks.Task DeleteUserAsync(Client.FleetServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddUser", ReplyAction="http://tempuri.org/IService/AddUserResponse")]
        bool AddUser(Client.FleetServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddUser", ReplyAction="http://tempuri.org/IService/AddUserResponse")]
        System.Threading.Tasks.Task<bool> AddUserAsync(Client.FleetServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EditUser", ReplyAction="http://tempuri.org/IService/EditUserResponse")]
        void EditUser(Client.FleetServiceReference.User newUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EditUser", ReplyAction="http://tempuri.org/IService/EditUserResponse")]
        System.Threading.Tasks.Task EditUserAsync(Client.FleetServiceReference.User newUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EditBusinessUnit", ReplyAction="http://tempuri.org/IService/EditBusinessUnitResponse")]
        void EditBusinessUnit(Client.FleetServiceReference.BusinessUnit businessUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EditBusinessUnit", ReplyAction="http://tempuri.org/IService/EditBusinessUnitResponse")]
        System.Threading.Tasks.Task EditBusinessUnitAsync(Client.FleetServiceReference.BusinessUnit businessUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CanRemoveBusinessUnit", ReplyAction="http://tempuri.org/IService/CanRemoveBusinessUnitResponse")]
        bool CanRemoveBusinessUnit(Client.FleetServiceReference.BusinessUnit businessUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CanRemoveBusinessUnit", ReplyAction="http://tempuri.org/IService/CanRemoveBusinessUnitResponse")]
        System.Threading.Tasks.Task<bool> CanRemoveBusinessUnitAsync(Client.FleetServiceReference.BusinessUnit businessUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CanRemoveEmployee", ReplyAction="http://tempuri.org/IService/CanRemoveEmployeeResponse")]
        bool CanRemoveEmployee(Client.FleetServiceReference.Employee emp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CanRemoveEmployee", ReplyAction="http://tempuri.org/IService/CanRemoveEmployeeResponse")]
        System.Threading.Tasks.Task<bool> CanRemoveEmployeeAsync(Client.FleetServiceReference.Employee emp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EditEmployee", ReplyAction="http://tempuri.org/IService/EditEmployeeResponse")]
        void EditEmployee(Client.FleetServiceReference.Employee emp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EditEmployee", ReplyAction="http://tempuri.org/IService/EditEmployeeResponse")]
        System.Threading.Tasks.Task EditEmployeeAsync(Client.FleetServiceReference.Employee emp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllRelations", ReplyAction="http://tempuri.org/IService/GetAllRelationsResponse")]
        System.Collections.Generic.List<Client.FleetServiceReference.VehicleToEmployeeRelation> GetAllRelations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllRelations", ReplyAction="http://tempuri.org/IService/GetAllRelationsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Client.FleetServiceReference.VehicleToEmployeeRelation>> GetAllRelationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveRelation", ReplyAction="http://tempuri.org/IService/RemoveRelationResponse")]
        bool RemoveRelation(Client.FleetServiceReference.VehicleToEmployeeRelation rel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveRelation", ReplyAction="http://tempuri.org/IService/RemoveRelationResponse")]
        System.Threading.Tasks.Task<bool> RemoveRelationAsync(Client.FleetServiceReference.VehicleToEmployeeRelation rel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddRelation", ReplyAction="http://tempuri.org/IService/AddRelationResponse")]
        bool AddRelation(Client.FleetServiceReference.VehicleToEmployeeRelation rel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddRelation", ReplyAction="http://tempuri.org/IService/AddRelationResponse")]
        System.Threading.Tasks.Task<bool> AddRelationAsync(Client.FleetServiceReference.VehicleToEmployeeRelation rel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetRelationFromVehicle", ReplyAction="http://tempuri.org/IService/GetRelationFromVehicleResponse")]
        System.Collections.Generic.List<Client.FleetServiceReference.VehicleToEmployeeRelation> GetRelationFromVehicle(Client.FleetServiceReference.Vehicle vehicle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetRelationFromVehicle", ReplyAction="http://tempuri.org/IService/GetRelationFromVehicleResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Client.FleetServiceReference.VehicleToEmployeeRelation>> GetRelationFromVehicleAsync(Client.FleetServiceReference.Vehicle vehicle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EditVehicle", ReplyAction="http://tempuri.org/IService/EditVehicleResponse")]
        void EditVehicle(Client.FleetServiceReference.Vehicle veh);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EditVehicle", ReplyAction="http://tempuri.org/IService/EditVehicleResponse")]
        System.Threading.Tasks.Task EditVehicleAsync(Client.FleetServiceReference.Vehicle veh);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : Client.FleetServiceReference.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<Client.FleetServiceReference.IService>, Client.FleetServiceReference.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AddVehicle(Client.FleetServiceReference.Vehicle vehicle) {
            return base.Channel.AddVehicle(vehicle);
        }
        
        public System.Threading.Tasks.Task<bool> AddVehicleAsync(Client.FleetServiceReference.Vehicle vehicle) {
            return base.Channel.AddVehicleAsync(vehicle);
        }
        
        public bool RemoveVehicle(Client.FleetServiceReference.Vehicle veh) {
            return base.Channel.RemoveVehicle(veh);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveVehicleAsync(Client.FleetServiceReference.Vehicle veh) {
            return base.Channel.RemoveVehicleAsync(veh);
        }
        
        public System.Collections.Generic.List<Client.FleetServiceReference.Vehicle> GetAllVehicles() {
            return base.Channel.GetAllVehicles();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Client.FleetServiceReference.Vehicle>> GetAllVehiclesAsync() {
            return base.Channel.GetAllVehiclesAsync();
        }
        
        public bool AddEmployee(Client.FleetServiceReference.Employee emp) {
            return base.Channel.AddEmployee(emp);
        }
        
        public System.Threading.Tasks.Task<bool> AddEmployeeAsync(Client.FleetServiceReference.Employee emp) {
            return base.Channel.AddEmployeeAsync(emp);
        }
        
        public bool RemoveEmployee(Client.FleetServiceReference.Employee emp) {
            return base.Channel.RemoveEmployee(emp);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveEmployeeAsync(Client.FleetServiceReference.Employee emp) {
            return base.Channel.RemoveEmployeeAsync(emp);
        }
        
        public System.Collections.Generic.List<Client.FleetServiceReference.Employee> GetAllEmployees() {
            return base.Channel.GetAllEmployees();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Client.FleetServiceReference.Employee>> GetAllEmployeesAsync() {
            return base.Channel.GetAllEmployeesAsync();
        }
        
        public bool AddBusinessUnit(Client.FleetServiceReference.BusinessUnit businessUnit) {
            return base.Channel.AddBusinessUnit(businessUnit);
        }
        
        public System.Threading.Tasks.Task<bool> AddBusinessUnitAsync(Client.FleetServiceReference.BusinessUnit businessUnit) {
            return base.Channel.AddBusinessUnitAsync(businessUnit);
        }
        
        public bool RemoveBusinessUnit(Client.FleetServiceReference.BusinessUnit businessUnit) {
            return base.Channel.RemoveBusinessUnit(businessUnit);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveBusinessUnitAsync(Client.FleetServiceReference.BusinessUnit businessUnit) {
            return base.Channel.RemoveBusinessUnitAsync(businessUnit);
        }
        
        public System.Collections.Generic.List<Client.FleetServiceReference.BusinessUnit> GetAllBusinessUnits() {
            return base.Channel.GetAllBusinessUnits();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Client.FleetServiceReference.BusinessUnit>> GetAllBusinessUnitsAsync() {
            return base.Channel.GetAllBusinessUnitsAsync();
        }
        
        public Client.FleetServiceReference.User Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<Client.FleetServiceReference.User> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public string ChangePassword(Client.FleetServiceReference.User user, string oldPw, string newPw, string newPwWdh) {
            return base.Channel.ChangePassword(user, oldPw, newPw, newPwWdh);
        }
        
        public System.Threading.Tasks.Task<string> ChangePasswordAsync(Client.FleetServiceReference.User user, string oldPw, string newPw, string newPwWdh) {
            return base.Channel.ChangePasswordAsync(user, oldPw, newPw, newPwWdh);
        }
        
        public System.Collections.Generic.List<Client.FleetServiceReference.User> GetAllUsers() {
            return base.Channel.GetAllUsers();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Client.FleetServiceReference.User>> GetAllUsersAsync() {
            return base.Channel.GetAllUsersAsync();
        }
        
        public void DeleteUser(Client.FleetServiceReference.User user) {
            base.Channel.DeleteUser(user);
        }
        
        public System.Threading.Tasks.Task DeleteUserAsync(Client.FleetServiceReference.User user) {
            return base.Channel.DeleteUserAsync(user);
        }
        
        public bool AddUser(Client.FleetServiceReference.User user) {
            return base.Channel.AddUser(user);
        }
        
        public System.Threading.Tasks.Task<bool> AddUserAsync(Client.FleetServiceReference.User user) {
            return base.Channel.AddUserAsync(user);
        }
        
        public void EditUser(Client.FleetServiceReference.User newUser) {
            base.Channel.EditUser(newUser);
        }
        
        public System.Threading.Tasks.Task EditUserAsync(Client.FleetServiceReference.User newUser) {
            return base.Channel.EditUserAsync(newUser);
        }
        
        public void EditBusinessUnit(Client.FleetServiceReference.BusinessUnit businessUnit) {
            base.Channel.EditBusinessUnit(businessUnit);
        }
        
        public System.Threading.Tasks.Task EditBusinessUnitAsync(Client.FleetServiceReference.BusinessUnit businessUnit) {
            return base.Channel.EditBusinessUnitAsync(businessUnit);
        }
        
        public bool CanRemoveBusinessUnit(Client.FleetServiceReference.BusinessUnit businessUnit) {
            return base.Channel.CanRemoveBusinessUnit(businessUnit);
        }
        
        public System.Threading.Tasks.Task<bool> CanRemoveBusinessUnitAsync(Client.FleetServiceReference.BusinessUnit businessUnit) {
            return base.Channel.CanRemoveBusinessUnitAsync(businessUnit);
        }
        
        public bool CanRemoveEmployee(Client.FleetServiceReference.Employee emp) {
            return base.Channel.CanRemoveEmployee(emp);
        }
        
        public System.Threading.Tasks.Task<bool> CanRemoveEmployeeAsync(Client.FleetServiceReference.Employee emp) {
            return base.Channel.CanRemoveEmployeeAsync(emp);
        }
        
        public void EditEmployee(Client.FleetServiceReference.Employee emp) {
            base.Channel.EditEmployee(emp);
        }
        
        public System.Threading.Tasks.Task EditEmployeeAsync(Client.FleetServiceReference.Employee emp) {
            return base.Channel.EditEmployeeAsync(emp);
        }
        
        public System.Collections.Generic.List<Client.FleetServiceReference.VehicleToEmployeeRelation> GetAllRelations() {
            return base.Channel.GetAllRelations();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Client.FleetServiceReference.VehicleToEmployeeRelation>> GetAllRelationsAsync() {
            return base.Channel.GetAllRelationsAsync();
        }
        
        public bool RemoveRelation(Client.FleetServiceReference.VehicleToEmployeeRelation rel) {
            return base.Channel.RemoveRelation(rel);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveRelationAsync(Client.FleetServiceReference.VehicleToEmployeeRelation rel) {
            return base.Channel.RemoveRelationAsync(rel);
        }
        
        public bool AddRelation(Client.FleetServiceReference.VehicleToEmployeeRelation rel) {
            return base.Channel.AddRelation(rel);
        }
        
        public System.Threading.Tasks.Task<bool> AddRelationAsync(Client.FleetServiceReference.VehicleToEmployeeRelation rel) {
            return base.Channel.AddRelationAsync(rel);
        }
        
        public System.Collections.Generic.List<Client.FleetServiceReference.VehicleToEmployeeRelation> GetRelationFromVehicle(Client.FleetServiceReference.Vehicle vehicle) {
            return base.Channel.GetRelationFromVehicle(vehicle);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Client.FleetServiceReference.VehicleToEmployeeRelation>> GetRelationFromVehicleAsync(Client.FleetServiceReference.Vehicle vehicle) {
            return base.Channel.GetRelationFromVehicleAsync(vehicle);
        }
        
        public void EditVehicle(Client.FleetServiceReference.Vehicle veh) {
            base.Channel.EditVehicle(veh);
        }
        
        public System.Threading.Tasks.Task EditVehicleAsync(Client.FleetServiceReference.Vehicle veh) {
            return base.Channel.EditVehicleAsync(veh);
        }
    }
}
